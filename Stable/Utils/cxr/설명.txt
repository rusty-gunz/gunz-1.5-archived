프로젝트 설명

CXR은 exe의 상수 문자열을 인코딩된 상태로 빌드하게 해주는 툴이다.
원본은 http://www.codeproject.com/KB/string/cxr.aspx 여기 있다.
원본은 MFC클래스를 사용하는데 stl버전으로 포팅한 건 http://code.google.com/p/cxr/ 여기서 받았다.

원래는 
const char* pString = "blah blah ..";
이런 형태의 문자열 상수를 소스에서 파싱해서 인코딩된 문자열로 바꿔주는 방식인데,
건즈에서는 문자열 상수를 저렇게 표기하지 않고 거의
#define STR1 "str1"
이런 형태로 표기하고 있기 때문에 그에 맞춰서 cxr 프로그램을 변경해야만 했다.

변경 내역
1.	#define STR1 "str1"					//<< 이런 문장을 cxr로 인코딩할 때 매크로의 이점을 살려서
	#define STR1 _CXR("..encoded...")	//<< 이렇게 _CXR()로 문자열을 감싸준다.
	여기서 _CXR()은 문자열 디코드 함수다. 즉 이 인코딩된 문자열을 사용하는 다른 코드들이
	디코딩을 위해 별도로 뭔가 해주지 않아도 되도록 하는 것이다.
	
2.	원래 cxr은 디코딩 함수를 처리한 소스파일 아래에 추가해주는데, 이게.. cpp면 괜찮은데 우리는 #define들이
	잔뜩 들어있는 h파일을 인코딩할 것이므로 여러파일을 인코딩 처리하면 같은 이름의 디코더 함수가
	여러개가 생겨난다. 그럼 중복 정의가 발생하므로 문제가 된다. 그래서 디코더를 한군데로 빼서 공통으로 쓰게 해야한다.
	그래서 원래 사용방법과 좀 다르게 됐는데, 
	#1: 주석으로 패스워드를 소스에 심어놓던 방식에서, 커맨드 라인으로 패스워드를 넘겨주게 바뀜
		e.g.) cxr -i my_src_file.cxr -o my_dest_file.h -p thisIsPasswordStr
		즉, -p 파라미터가 추가되었다.
	#2: 저렇게 하면 주어진 파라미터로 디코더 함수가 cxr_decoder.cpp에 만들어진다. 건즈 프로젝트에서 저 cpp를 포함시켜야한다.
	#3: 여러 파일을 인코딩할때에는 패스워드를 같은 걸로 인코딩해야 한다. 디코더 함수는 무조건 cxr_decode.cpp에 출력되기 때문에..