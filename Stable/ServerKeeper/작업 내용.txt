- 기능 -
Server와 관련된 환경 설정내용을 저장해 놓고 관리함( 시작, 정지 ).
Keeper Manager에서 패치작업을 요청하면 패치 작업을 수행함. ( 처리 )
Server의 시작, 정지를 관리함.
Server의 현제 상태를 Keeper Manager로 전달해줌. ( 부족함. )
Keeper Manager가 정상적으로 연결되어 있는지 검사함. 연결에 이상이 있을시 연결을 종료시킴.( 처리 )




- 완료된 작업 -
패치작업 관련 코딩( 프로세스 검사, 서버 정지, 파일 다운로드, 압축해제, 복사, 임시파일 제거, 서버 다시 실행 ).
일정 시간 간격으로 Ping을 체크하여 접속 상태를 검사. 이상이 있을시 연결을 종료시킴.



- 작업을 하기전에 반드시 봐야 할 내용. -
Keeper가 패치작업을 할때 파일 서버로부터 패치 파일을 다운받기 전에 List라는 임시 파일을 다운 받는다.
	이 파일에는 다운 받을 파일의 폴더 경로가 있어 그 폴더를 검색하여 폴더안의 모든 파일을 다운 받는다.
	현제는 버전비교 부분이 빠져 있기에 후에 이 부분을 List파일에 넣어서, 
	파일을 다운 받기전에 마지막 패치 작업한 버전내용과 List파일에 있는 내용을 비교하여,
	작업을 수행할지를 결정을 함.
	
Keeper가 파일 서버로부터 다운로드한 파일을 로컬의 임시 폴더에 저장을 하는데.
	만약 임시 폴더가 존재하지 않을 경우는 임시 폴더를 생성할수 있게 해줘야함. 
	현제는 손으로 만들어 주고 있음.
	
Keeper Manager가 Keeper로 접속할때 MServerObj에 저장되는 MUID의 값이 (0, 0)이 되는 경우가 생김.
	이 경우에는 Keeper가 Keeper Manager로 보내는 커맨드가 정상적으로 전달되지 않음. 
	하지만 Keeper Manager에서 Keeper로 오는 커맨드는 정상적으로 처리가 됨.
	가장 큰 문제임. 가장 먼저 이 문제를 해결해야 함.
	
정상적으로 접속종료가 되었을경우 상태가 CLOSE_WAIT가 되는데 이것을 일정 시간 간격으로 Ping을 Keeper Manager로 
	보내서 응답을 받아 일정 시간동안 응답이 없을경우 연결로 종료 시켜서 처리하고 있음.
	테스트는 해보았지만 좀더 안전한 테스트가 필요함( 다른 컴터와의 연결된 환경에서의 테스트 등. )
	
	
	
	
- Keeper를 사용하는 방법 -
현제 Keeper는 .\Configure.ini를 사용하여 작업에 필요한 정보를 설정함.
	- 내용 -
	[UPDATER]							// 패치 업데이트 작업에 필요한 설정 내용을 나타냄.
	ServerName="192.168.0.236"			// 파일 서버의 이름 및 IP주속.
	UserName="sunge"					// 파일 서버에 접속하는 ID.
	Password="sunge"					// 파일 서버 접속에 필요한 Password.
	FtpRootDir="/"						// 파일 서버의 최상의 Root 디렉토리.
	FtpListFile="list.txt"				// 우선 접속하여 다운받을 파일이 있는 폴더경로와 버전(날자)정보가 있는 파일. 현제 버젼 비교는 빠져있음.
	LocalTempDir=".\Temp"				// 파일 서버에서 다운로드한 파일을 임시로 저장할 폴더. 패치 작업이 끝나면 폴더는 남고, 폴더안의 파일만 지워짐.
	LocalDestRootDir="C:\Temp\Dest"		// 임시폴더의 파일들이 복사되어야 할 디렉토리 경로. 반드시 절대경로로 적어줘야 함.
	Tok="Temp"							// 임시돌더에 저장된 파일들이 복사되어야 할 디렉토리로부터 상대적 경로를 구하기 위해서 임시폴더와의 상대적
											경로를 구할때 임시 폴더 이름을 사용하여 잘라내기 위해서 사용하는 이름. 반드시 임시폴더 이름과 같아야 함.
											
	// Server Process와 관련된 정보도 들어갈 필요가 있을거 같음.
											
.\Configure.ini을 설정해 놓고 Keeper실행 파일과 같은 폴더에 넣어 실행을 하면,
	Keeper Manager의 요청 작업이 있을시 필요한 정보를 가져와 작업을 수행한다.